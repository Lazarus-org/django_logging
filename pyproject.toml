[build-system]
build-backend = "poetry.core.masonry.api"
requires = [ "poetry-core" ]

[tool.poetry]
name = "dj-logging"
version = "2.0.0"
description = "A package for logging in django applications"
authors = [ "ARYAN-NIKNEZHAD <aryan513966@gmail.com>", "MEHRSHAD-MIRSHEKARY <mehrshad_mirshekary@email.com>" ]
license = "MIT"
readme = "README.md"
keywords = [ "django_logging", "django", "logging" ]

classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Web Environment",
  "Framework :: Django",
  "Framework :: Django :: 4.2",
  "Framework :: Django :: 5.0",
  "Framework :: Django :: 5.1",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

packages = [
  { include = "django_logging" },
]

[tool.poetry.urls]
"Documentation" = "https://django-logging.readthedocs.io"
"Source Code" = "https://github.com/lazarus-org/django_logging"
"Changelog" = "https://github.com/lazarus-org/django_logging/blob/main/CHANGELOG.md"
"Issues" = "https://github.com/lazarus-org/django_logging/issues"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
django = [
  { version = ">=4.2,<5.0", python = ">=3.9,<3.10" },
  { version = ">=4.2,<5.3", python = ">=3.10" },      # Django 4.2 and 5.x for Python 3.10+
]

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.2"
pytest-asyncio = "^0.24.0"
pytest-django = "^4.8.0"
pytest-cov = "^5.0.0"
pylint = "^3.2.6"
pylint-django = "^2.5.5"
mypy = "^1.11.1"
isort = "^5.13.2"
black = "^24.4.2"
commitizen = "^3.28.0"
pre-commit = "^3.5.0"
bandit = { extras = [ "toml" ], version = "^1.7.9" }
tox = "^4.16.0"
django-stubs = "^5.0.4"
sphinx = "^6.2.1"
sphinx-rtd-theme = "^2.0.0"
docformatter = "^1.7.5"
codecov = "^2.1.13"
python-semantic-release = "^9.8.8"

[tool.black]
line-length = 88
exclude = '''
/(
    \.git
  | \.venv
  | \.tox
  | build
  | dist
  | migrations
  | venv
  | env
  | __pycache__
  | node_modules
  | env
  | kernel
  | \.mypy_cache
  | \.pytest_cache
  | .*\.egg-info
)/
'''

[tool.isort]
profile = "black"
line_length = 88
skip = [
  "venv",
  ".venv",
  ".tox",
  "build",
  "dist",
  ".git",
  "__pycache__",
  "*.egg-info",
  ".mypy_cache",
  ".pytest_cache",
  "migrations",
  "node_modules",
  "env",
  "kernel",
]

[tool.pylint]
disable = [
  "C0103", # Invalid constant name
  "C0114", # Missing module docstring
  "C0115", # Missing class docstring
  "C0116", # Missing function or method docstring
  "E1101", # Instance of 'Foo' has no 'bar' member
  "W0212", # Access to a protected member
  "C0301", # Line too long
  "C0411", # Wrong import order
  "W0611", # Unused imports
  "W0613", # Unused arguments
  "W0622", # Redefining built-in names
  "R0903", # Too few public methods
  "R0801", # Duplicate code
  "W0621",
  "C0415",
  "R1719", # The if expression can be replaced with 'bool(test)'
  "R1705", # Unnecessary "elif" after "return"
  "R0401",
]
max-line-length = 88
ignore = [
  "tests",
  "migrations/*",
  "venv/*",
  "build/*",
  "dist/*",
  ".git/*",
  ".tox/*",
  "__pycache__/*",
  "*.egg-info/*",
  ".mypy_cache/*",
  ".pytest_cache/*",
]
django-settings-module = "kernel.settings"
load-plugins = [
  "pylint_django",
  "pylint.extensions.docparams",
]

suggestion-mode = true
const-rgx = "([A-Z_][A-Z0-9_]*)|(__.*__)"
attr-rgx = "[a-z_][a-z0-9_]{2,30}$"
variable-rgx = "[a-z_][a-z0-9_]{2,30}$"
argument-rgx = "[a-z_][a-z0-9_]{2,30}$"
method-rgx = "[a-z_][a-z0-9_]{2,30}$"
function-rgx = "[a-z_][a-z0-9_]{2,30}$"
class-rgx = "[A-Z_][a-zA-Z0-9]+$"
module-rgx = "(([a-z_][a-z0-9_]*)|(__.*__))$"

[tool.pytest.ini_options]
python_files = [ "tests.py", "test_*.py" ]
addopts = "--cov --cov-report=term-missing --cov-report=html --cov-fail-under=90"
markers = [
  "commands: Tests for Django management commands in the logging package.",
  "commands_send_logs: Tests focused on the `send_logs` management command.",
  "commands_generate_pretty_json: Tests for the command that generates pretty-formatted JSON logs.",
  "commands_generate_pretty_xml: Tests for the command that generates pretty-formatted XML logs.",
  "commands_logs_size_audit: Tests for the command that audits log sizes to ensure they don't exceed defined limits.",
  "filters: Tests that verify log filtering mechanisms.",
  "filters_level_filter: Tests for filtering logs based on their severity level.",
  "formatters: Tests for log formatters that structure log messages.",
  "base_formatter: Tests for the base class of formatters.",
  "flat_formatter: Tests for the formatter that creates flat log formats.",
  "json_formatter: Tests for the formatter that structures logs as JSON objects.",
  "xml_formatter: Tests for the formatter that structures logs as XML documents.",
  "colored_formatter: Tests for a formatter that adds color coding to log messages.",
  "handlers: Tests for components that dispatch log messages to their destinations.",
  "email_handler: Tests for the handler responsible for sending logs via email.",
  "middleware: Tests related to middleware components in logging.",
  "base_middleware: Tests for the base class of middleware components.",
  "request_middleware: Tests for middleware handling incoming HTTP requests in logging.",
  "monitor_log_size_middleware: Tests for middleware that monitors the size of log files.",
  "settings: Tests that ensure logging settings are correctly applied.",
  "settings_checks: Tests for validating the correctness of logging settings.",
  "settings_conf: Tests for verifying the configuration of logging settings.",
  "utils: Tests for utility functions supporting the logging package.",
  "utils_context_manager: Tests for context managers handling resources in logging.",
  "utils_email_notifier: Tests for utilities that send notifications via email.",
  "utils_get_conf: Tests for utility functions that retrieve configuration settings.",
  "utils_log_and_notify: Tests for logging utilities that trigger notifications.",
  "utils_set_conf: Tests for utility functions that set configuration settings.",
  "utils_process_file: Tests for utility functions that process files.",
  "validators: Tests for validating configurations and inputs in the logging package.",
  "config_validator: Tests focused on validators that check configuration settings.",
  "email_settings_validator: Tests for validators that ensure email settings are valid.",
  "decorators: Tests focused on custom decorators used throughout the package.",
  "decorators_execution_tracking: Tests specifically for the execution_tracking module.",
  "contextvar: Tests for context variable handling in the logging package.",
  "contextvar_manager: Tests for managing context variables across different log contexts.",
  "views: Tests for MVT views in the django logging package.",
  "views_log_iboard: Tests specially for the log_iboard view.",
]
asyncio_default_fixture_loop_scope = [ "function" ]

[tool.coverage.run]
source = [ "django_logging" ]
omit = [
  "*/tests/*",
  "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self\\.debug",
  "raise AssertionError",
  "if 0:",
  "if __name__ == .__main__.:",
]

[tool.mypy]
mypy_path = "stubs"
disallow_untyped_calls = true
disallow_untyped_defs = true
ignore_missing_imports = true
explicit_package_bases = true
exclude = """
^docs/source/conf.py|
^build/|
^tests/|
^stubs/|
^kernel/
"""

[tool.bandit]
targets = [ "./django_logging" ]
exclude_dirs = [
  "tests",
  "migrations",
]
severity = "medium"
confidence = "medium"
max_lines = 500
progress = true
reports = true
output_format = "screen"
output_file = "bandit_report.txt"
include = [ "B101", "B102" ]
exclude_tests = [ "B301", "B302" ]

[tool.bandit.plugins]
B104 = { check_typed_list = true }

[tool.commitizen]
name = "cz_conventional_commits"
version = "2.0.0"
tag_format = "v$version"

[tool.commitizen.settings]
increment_types = [ "feat", "fix" ]

[tool.semantic_release]
assets = [  ]
build_command_env = [  ]
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "emoji"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
no_git_verify = false
tag_format = "v{version}"
#version_variables = [ "django_logging/version.py:__version__" ]

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [  ]

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = [  ]
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = [ "build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test" ]
minor_tags = [ "feat" ]
patch_tags = [ "fix", "perf" ]
default_bump_level = 0
parse_emoji = true

[tool.semantic_release.remote]
name = "origin"
token = ""
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = [ "dist/*" ]
upload_to_vcs_release = true
